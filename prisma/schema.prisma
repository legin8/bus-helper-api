// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId          Int           @id @default(autoincrement())
  email           String        @unique
  name            String
  password        String
  role            Role          @default(BASIC_USER)
  createdAt       DateTime      @default(now())
}

enum Role {
  ADMIN_USER
  BASIC_USER
}

// e.g ORC or QNT
model Agency {
  code          String    @id @unique
  region        String
  url           String
  phone         String
  routes        Route[]
}

// Each is a collection of services that may or may not share the same number
model Route {
  id              Int       @id @default(autoincrement())
  agencyCode      String       // ORC or QNT also refers to the agency table
  title           String      // 33 or 37/38
  isSchoolRun     Boolean   @default(false)
  locations       String 
  agency          Agency    @relation(fields: [agencyCode], references: [code], onUpdate: Cascade, onDelete: Restrict)
  services        Service[]
}

// Each service refers to a route and goes one way or more.
model Service {
  id              Int       @id @default(autoincrement())
  routeId         Int         // refers to the route table
  code            String      // 33A or 37
  name            String      // Corstorphine to Helen
  route           Route     @relation(fields: [routeId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  trips           Trip[]
}

// A group of trips is all the bus trips for all days
model Trip {
  id              Int       @id @default(autoincrement())
  serviceId       Int           // refers to the service table
  startTime       DateTime      // This is the start time that will be incremented
  service         Service    @relation(fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  tripSequence    TripSequence[]
  tripDay         TripDay[]     // One trip and be for 1 or more days
}

// Connects the trips to the day or days that are associated with it.
model TripDay {
  tripId          Int
  day             Day
  trip            Trip @relation(fields: [tripId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  @@unique([tripId, day])
}

enum Day {
  DAILY
  WD
  WE
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

model TripSequence {
  tripId          Int
  serviceCode     String    // 33A or 50A
  version         Int       // 1 or 2
  trip            Trip @relation(fields: [tripId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  sequence        Sequence @relation(fields: [serviceCode, version], references: [serviceCode, version], onUpdate: Cascade, onDelete: Restrict)
  @@unique([tripId])
}

// A group of run entrys is 1 Trip, so the bus can have different variations in how it starts and finishes.
model Sequence {
  serviceCode      String
  version          Int
  tripSequence     TripSequence[]
  runStop          SequenceStop[]
  @@id([serviceCode, version])
}

// A group of sequenceStops is the order of this bus run and can be reused
model SequenceStop {
  serviceCode     String
  version         Int
  order           Int
  timeIncrement   Int
  stopCode        String
  run             Sequence      @relation(fields: [serviceCode, version], references: [serviceCode, version], onUpdate: Cascade, onDelete: Cascade)
  stop            Stop     @relation(fields: [stopCode], references: [code], onUpdate: Cascade, onDelete: Restrict)
  @@unique([serviceCode, version, order, timeIncrement, stopCode])
}

// A list of bus stops that a run can pick from.
model Stop {
  code            String  @id
  name            String
  lat             String
  long            String
  runStop        SequenceStop[]
}