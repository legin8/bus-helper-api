// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  userId          Int           @id @default(autoincrement())
  email           String        @unique
  name            String
  password        String
  role            String
  createdAt       DateTime      @default(now())
}

// e.g ORC or QNT
model Agency {
  code          String    @id @unique
  region        String
  url           String
  phone         String
  routes        Route[]
}

// Each is a collection of services that may or may not share the same number
model Route {
  title           String
  agencyCode      String
  locations       String
  isSchoolRun     Boolean   @default(false)
  agency          Agency    @relation(fields: [agencyCode], references: [code])
  services        Service[]
  @@id([title, agencyCode, isSchoolRun])
}

// Each service refers to a route and goes one way or more.
model Service {
  code            String
  agencyCode      String
  isSchoolRun     Boolean   @default(false)
  routeTitle      String
  name            String
  route           Route     @relation(fields: [routeTitle, agencyCode, isSchoolRun], references: [title, agencyCode, isSchoolRun])
  trips           Trip[]
  @@id([code, agencyCode])
}

// A group of trips is all the bus trips for all days
model Trip {
  serviceCode     String
  code            Int
  agencyCode      String
  name            String
  service         Service @relation(fields: [serviceCode, agencyCode], references: [code, agencyCode])
  tripRun         TripRun[]
  @@id([serviceCode, code, agencyCode])
}

model TripRun {
  serviceCode     String
  tripCode        Int
  agencyCode      String
  runCode         String
  runVersion      Int
  runOrder        Int
  trip            Trip @relation(fields: [serviceCode, tripCode, agencyCode], references: [serviceCode, code, agencyCode])
  run             Run @relation(fields: [runCode, runVersion, runOrder], references: [code, version, order])
  @@id([serviceCode, tripCode, agencyCode, runCode, runVersion, runOrder])
}

// A group of run entrys is 1 Trip, so the bus can have different variations in how it starts and finishes.
model Run {
  code             String
  version          Int
  order            Int
  timeIncrement    Int
  runStop          RunStop[]
  tripRun          TripRun[]
  @@id([code, version, order])
}

model RunStop {
  runCode         String
  version         Int
  order           Int
  stopCode        String
  run             Run      @relation(fields: [runCode, version, order], references: [code, version, order])
  stop            Stop     @relation(fields: [stopCode], references: [code])
  @@id([runCode, version, order, stopCode])
}

// A list of bus stops that a run can pick from.
model Stop {
  code            String  @id
  name            String
  long            String
  lat             String
  runStop        RunStop[]
}

// This will proberly be used, but it can't be used with sqlite
// enum Role {
//   ADMIN_USER
//   BASIC_USER
// }